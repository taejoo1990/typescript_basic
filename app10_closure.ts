//closure
//클로저

//함수
//メソッド
function increment(){
    //ローカル変数
    //지역변수
    let saveNumber = 1;
    //ローカルメソッド
    //내부함수
    return ()=>saveNumber++;
}
//メソッドを呼び、ローカルメソッドをリターンさせてリテラルに入れる。
//함수를 호출해서, 리턴된 내부함수를 상수에 보존.
const inc = increment();
//ローカルメソッドを呼ぶ。どころで、increment()のローカル変数saveNumberがもうない。
//undifinedを出力はずが、正常に作動する。
//メソッドの中で内部メソッドがある時、その中で使うローカル変数を他の空間（メモリ）に保存する
//その空間をcloserと言う。
//------------------------------------------------------------------------------------
//내부함수를 호출. 이런 경우 함수의 로컬공간이 소멸한 상태이기 때문에 지역변수를 사용할 수 없다.
//undifiend값이 나와야 하지만, 실제로 정상적으로 작동하는 것을 볼 수 있다.
//함수안에서 다시 함수가 정의될 경우, 내부함수에서 사용되는 로컬변수의 정보를 별도공간에 저장해 둔다.
//그러한 메모리공간을 클로저라고 부른다.
console.log(inc());
console.log(inc());
console.log(inc());
//変数がローカル変数で正義、closure空間にあるため、アクセスができない。
//변수가 지역변수로 정의되었고, 클로저안에 있기 때문에 변수보호에 탁월하다.
//saveNumber = 1;